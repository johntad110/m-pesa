/**
 * Defines the severity levels for log messages.
 * 
 * This enum provides a standardized set of log levels to categorize the importance 
 * and urgency of log messages generated by the application.
 *
 * @enum {number}
 * 
 * @property {number} Emergency - Indicates a system-wide message that immediately jeopardizes the system and may require immediate action.
 * @property {number} Alert - A serious problem that requires immediate attention.
 * @property {number} Critical - A critical condition that, although not immediately life-threatening, requires immediate attention.
 * @property {number} Error - An error condition.
 * @property {number} Warning - A warning condition.
 * @property {number} Notice - A normal but significant condition.
 * @property {number} Informational - Informational messages.
 * @property {number} Debug - Debug-level messages for development and troubleshooting.
 */
export enum LogLevel {
    Emergency = 0,
    Alert = 1,
    Critical = 2,
    Error = 3,
    Warning = 4,
    Notice = 5,
    Informational = 6,
    Debug = 7
}

/**
 * A logger utility for standardized logging.
 */
export class Logger {
    private minLogLevel: LogLevel;

    /**
     * Creates a new Logger instance.
     * @param minLogLevel - The minimum log level to capture (default is Informational).
     */
    constructor(minLogLevel: LogLevel = LogLevel.Informational) {
        this.minLogLevel = minLogLevel;
    }

    /**
     * Logs a message if the specified level meets the minimum log level.
     * @param level - The log level for this message.
     * @param message - The log message.
     * @param context - Additional contextual information (optional).
     */
    private log(level: LogLevel, message: string, context?: Record<string, unknown>): void {
        if (level > this.minLogLevel) return;

        const logEntry = {
            timestamp: new Date().toISOString(),
            level: LogLevel[level].toLowerCase(),
            message,
            context,
        };

        // Output as JSON for easy parsing
        console.log(JSON.stringify(logEntry));
    }

    /**
     * Logs an emergency message (level 0).
     */
    public logEmergency(message: string, context?: Record<string, unknown>): void {
        this.log(LogLevel.Emergency, message, context);
    }

    /**
     * Logs an alert message (level 1).
     */
    public logAlert(message: string, context?: Record<string, unknown>): void {
        this.log(LogLevel.Alert, message, context);
    }

    /**
     * Logs a critical message (level 2).
     */
    public logCritical(message: string, context?: Record<string, unknown>): void {
        this.log(LogLevel.Critical, message, context);
    }

    /**
     * Logs an error message (level 3).
     */
    public logError(message: string, context?: Record<string, unknown>): void {
        this.log(LogLevel.Error, message, context);
    }

    /**
     * Logs a warning message (level 4).
     */
    public logWarning(message: string, context?: Record<string, unknown>): void {
        this.log(LogLevel.Warning, message, context);
    }

    /**
     * Logs a notice message (level 5).
     */
    public logNotice(message: string, context?: Record<string, unknown>): void {
        this.log(LogLevel.Notice, message, context);
    }

    /**
     * Logs an informational message (level 6).
     */
    public logInfo(message: string, context?: Record<string, unknown>): void {
        this.log(LogLevel.Informational, message, context);
    }

    /**
     * Logs a debug message (level 7).
     */
    public logDebug(message: string, context?: Record<string, unknown>): void {
        this.log(LogLevel.Debug, message, context);
    }
}
